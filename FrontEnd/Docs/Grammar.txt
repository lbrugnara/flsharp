(* Copyright (c) Leonardo Brugnara *)
(* Full copyright and license information in LICENSE file *)

(* Start *)
program	-> declaration*
        ;


(* Declarations *)
declaration	-> func_declaration 
			| variable_declaration
			| constant_declaration
			| class_declaration
			| statement
            ;


(* Function *)
func_declaration -> 'fn' IDENTIFIER '(' func_params? ')' ( '{' declaration* '}' | '=>' expression )
                 ;


func_params -> func_param_declaration ( ',' func_param_declaration )*
            ;

func_param_declaration -> 'mut'? IDENTIFIER? IDENTIFIER
					    ;

(* Variable Declaration *)
variable_declaration -> 'mut'? ( implicit_var_declaration | typed_var_declaration )
					  ;

implicit_var_declaration -> VAR ( IDENTIFIER '=' expression | var_destructuring ) ';'
                         ;

typed_var_declaration -> IDENTIFIER ( '[' ']' )* ( typed_var_definition | var_destructuring ) ';'
                      ;

typed_var_definition -> IDENTIFIER ( '=' expression ( ',' typed_var_definition )* )?
                     ;

var_destructuring -> '(' ( ',' | IDENTIFIER )+ ')' '=' expression
                  ;

(* Constant declaration *)
constant_declaration -> 'const' IDENTIFIER? IDENTIFIER '=' expression ( ',' IDENTIFIER '=' expression )* ) ';'
                     ;

(* Class declaration *)
access_modifier -> ( 'public' | 'protected' | 'private' )
				;

class_declaration -> 'class' IDENTIFIER '{' class_body? '}'
				  ;

class_body -> class_property
			| class_constant
			| class_method
			;

class_property -> class_field
				;

class_field -> access_modifier? 'mut'? IDENTIFIER ( '[' ']' )* IDENTIFIER ( '=' expression )? ';'
			;

class_constant -> access_modifier? 'const' IDENTIFIER IDENTIFIER '=' expression ';'
				;

class_method ->  access_modifier? func_declaration
			 ;

(* Statements *)
statement	-> expression_statement
			| if_statement
			| while_statement
			| for_statement
			| break_statement
			| continue_statement
			| return_statement
			| block
            ;


parenthesized_expr  -> '(' expression ')' ( statement | ';' )
                    ;


braced_expr -> expression block
            ;


expression_statement -> expression ';'
                     ;


block -> '{' declaration* '}'
      ;


(* Conditional Statements *)
if_statement -> 'if' ( parenthesized_expr | braced_expr ) ( 'else' ( statement | ';' ) )?
             ;


(* Loop statements *)
while_statement -> 'while' ( parenthesized_expr | braced_expr )
                ;


for_statement   -> 'for' '(' for_initializer? ';' expression? ';' for_iterator? ')' statement
			    | 'for' for_initializer? ';' expression? ';' for_iterator? block
                ;


for_initializer -> for_declaration
				| expression ( ',' expression )*
                ;


for_declaration -> ( implicit_var_declaration | typed_var_declaration )
                ;


for_iterator -> expression_list
             ;


break_statement -> 'break' INTEGER? ';'
                ;


continue_statement  -> 'continue' ';'
                    ;


return_statement -> 'return' ( expression )? ';'
                 ;


(* Expressions *)

expression	-> expression_assignment
            ;

expression_assignment	-> lambda_expression 
						| destructuring ( '=' | '+=' | '-=' | '/=' | '*=' ) expression_assignment 
						| conditional_expression ( ( '=' | '+=' | '-=' | '/=' | '*=' ) expression_assignment )?
                        ;

destructuring	-> '(' IDENTIFIER ( '.' IDENTIFIER )* ( ',' destructuring )* ')'
                ;

(* Lambdas *)
lambda_expression   -> lambda_params '=>' ( block | expression )
                    ;


lambda_params -> '(' func_params ')'
			  | func_params
              ;

expression_list -> expression ( ',' expression )*
                ;

(* Ternay operator *)
conditional_expression  -> null_coalescing_expression ( '?' expression ':' expression )?
                        ;


(* Null coalescing operator *)
null_coalescing_expression  -> or_expression ( '??' null_coalescing_expression )?
                            ;


or_expression	-> and_expression ( '||' and_expression )*
                ;


and_expression	-> equality_expression ( '&&' equality_expression )*
                ;


equality_expression	-> comparison_expression ( ( '!=' | '==' ) comparison_expression )*
                    ;


comparison_expression	-> addition_expression ( ( '>' | '>=' | '<' | '<=' ) addition_expression )*
                        ;


addition_expression	-> multiplication_expression ( ( '-' | '+' ) multiplication_expression )*
                    ;


multiplication_expression	-> unary_expression ( ( '/' | '*' ) unary_expression )*
                            ;


unary_expression	-> ( '!' | '-' ) unary_expression
					| ( '++' | '--' ) symbol_expression symbol_operator*
					| symbol_expression symbol_operator* ( '++' | '--' )?
                    ;

(* Symbol operators *)
symbol_operator -> ( dot_operator | indexer_operator | call_operator )
		;

dot_operator -> '.' IDENTIFIER
			  ;

indexer_operator -> '[' expression_list ']'
        ;

call_operator -> '(' expression_list? ')'
          ;

(* Symbol expressions *)
symbol_expression -> 'new' IDENTIFIER ( '.' IDENTIFIER )* call_operator
				   | IDENTIFIER
                   | object_expression
				   | array_expression
				   | tuple_expression
				   | primary
				   | '(' expression ')'
				   ;

primary	-> 'true' 
		| 'false'
		| CHAR
		| INTEGER
		| FLOAT
		| DOUBLE 
		| DECIMAL 
		| STRING
        ;

(* Objects expression *)
object_expression   -> '{' object_property ( ',' object_property )* ','? '}'
                    ;

object_property     -> 'mut'? IDENTIFIER ':' expression
                    ;

(* Arrays *)
array_expression	-> '[' expression ( ',' expression )* ']'
					;

(* Tuples *)
tuple_expression	-> '(' tuple_member ',' ( tuple_members )? ')'
					;

tuple_members -> tuple_member ( ',' tuple_member )*
					;

tuple_member	-> ( member_name ':' )? expression
				;
