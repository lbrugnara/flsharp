Semantic Analysis
=================

The semantic analysis consists of 4 passes (all tied with each other) that determine if a program is semantically valid: 

- Symbol resolving
- Type inference
- Type checking
- Mutability check

All these passes implement the visitor pattern and walk through the AST in order to accomplish their goal.

The semantic analysis also includes the creation and usage of a [Symbol Table] and introduces the [Type System] of the [Zenit] compiler.

Symbol table
~~~~~~~~~~~~

The [Symbol Table] is the data structure that contains all the symbol information which is used -and updated- by the different semantic analysis passes in order to properly validate the program. In the Zenit Compiler, the symbol table is a data structure that contains 2 references to objects that implement `IContainer`:

```c#
    public class SymbolTable : ISymbolTable
    {
        // ...
        private IContainer Global { get; set; }

        // ...
        public IContainer CurrentScope { get; private set; }

        // ...
    }
```

The `Global` container is a reference to the root scope within the symbol table, whilst the `CurrentScope` is the "target" scope for all the symbol table's operations, like adding new symbols, or retrieving existing symbols.

Symbols
~~~~~~~

In the [Zenit] compiler, all the symbols are objects that satisfy the `ISymbol` interface. The `IContainer` interface extends from the `ISymbol` interface, therefore `Global` and `CurrentScope` members from the [Symbol Table] are [Zenit] symbols.

The namespace `Zenit.Semantics.Symbols` (and its children) contains the different symbols that are used in the semantic analysis in order to validate the source program. The symbol hierarchy is as follow:

!```
´ISymbol´
 |-- ´IContainer´
 |      |-- ´IBlock´
 |      |       \`-- ´ILoop´
 |      \`-- ´IPackage´
 |
 |-- ´IVariableSymbol´
 |
 \`-- ´ITypeSymbol´
        |-- ´IPrimitiveSymbol´
        |-- ´IComplexSymbol´
        \`-- ´ISpecialTypeSymbol´
                \`-- ´IUnresolvedTypeSymbol´
```



Symbol resolving
~~~~~~~~~~~~~~~~

The [SymbolResolver]s walk through the AST resolving and using the symbols involved in the program. Many of the ´resolvers´ simply do a pass-through, like the ´statement resolvers´ (`If`, `Block`, `While`, etc), or simply return a registered symbol like the ´expression resolvers´ (`Accessor`, `Callable`, `Return`, etc), but other ´expression resolvers´ are key in the process in order to allow registering new symbols (along with the symbol table). These resolvers are:

- Primitive
- Object
- Tuple
- Constant
- Variable
- Function


Primitive symbol resolver
-------------------------

This resolver 